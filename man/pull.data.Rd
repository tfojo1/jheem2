% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DATA_MANAGER_data_manager.R
\name{pull.data}
\alias{pull.data}
\title{Pull data from a data manager}
\usage{
pull.data(
  data.manager = get.default.data.manager(),
  outcome,
  metric = "estimate",
  keep.dimensions = NULL,
  dimension.values = NULL,
  sources = NULL,
  from.ontology.names = NULL,
  exclude.ontology.names = NULL,
  target.ontology = NULL,
  allow.mapping.from.target.ontology = T,
  append.attributes = NULL,
  append.metrics = NULL,
  allow.other.sources.for.denominator = F,
  na.rm = F,
  ignore.ontologies.without.requested.locations = T,
  check.arguments = T,
  debug = F,
  ...
)
}
\arguments{
\item{data.manager}{A jheem.data.manager object}

\item{outcome}{The outcome type for the data. Must be an outcome previously registered to this data manager with \code{\link{register.data.outcome}}}

\item{metric}{The type of measurement. The default value is "estimate", but other options include "cv", "variance", and "sd".}

\item{keep.dimensions}{The dimensions that should be retained in the returned value}

\item{dimension.values}{A named list, indicating which values for specific dimensions to pull data for. Each element must be a named character, numeric, or logical vector.}

\item{sources}{The data sources from which to pull data (if available). If NULL, will pull from all data sources that have any relevant data}

\item{from.ontology.names}{The names of the ontologies from which to pull data (if available). If NULL, will pull from all ontologies that have any relevant data and can be mapped to the requested ontology. Must refer to ontologies previously registered to this data manager with \code{\link{register.data.ontology}}}

\item{target.ontology}{Optional argument, indicating the ontology according to which results are desired. The data manager will apply an ontology mapping (if it can) to align its data to the desired ontology}

\item{allow.mapping.from.target.ontology}{A logical indicator. If TRUE, if target.ontology is specified, but the data manager does not have data that can be mapped to the target ontology, it will search for data such that an ontology.mapping can be applied to data in the target.ontology that make those data align with the data pulled}

\item{append.attributes}{A character vector indicating requested data attributes to include with the result. May be either "details", "url", or both}

\item{na.rm}{Whether to disregard NA values when aggregating out dimensions not in keep.dimensions}

\item{ignore.ontologies.without.requested.locations}{If 'dimension.values' includes a location dimension, should ontologies that don't have any of those locations for the requested outcome be ignored? See detailed documentation about how ontologies factor into the output. (NOT YET WRITTEN)}

\item{...}{Optional alternative way to specify dimension.values. Each element must be a named character, numeric, or logical vector.}

\item{include.sources.without.data.in.output}{When 'sources' is not NULL, include all sources in 'sources' in the output array even if no data was found for some, or even all, sources. If 'sources' is NULL, will include all registered sources for the outcome in the output array.}
}
\value{
A numeric array with named dimnames, with one dimension for each value of 'keep.dimensions', plus an additional dimension, "source" at the beginning, with one value for each source from which data were pulled
The return value may have several attributes:
(1) If target.ontology is not-NULL and allow.mapping.from.target.ontology==T, 'ontology.mapping' with refer to an ontology.mapping object that can be applied to data in the target.ontology to make them align with the returned array
(2) If append.attributes includes "url", an array with the same dimensions as the returned array, where each element is one or more URLs separated by "__"
(3) If append.attributes includes "details", an with the same dimensions as the returned array, where each element is one or more details about data collection separated by "__"
}
\description{
#'@export
pull.data <- function(data.manager,
                      outcome,
                      keep.dimensions,
                      dimensions.values = NULL,
                      target.ontology,
                      debug = F)
{
    data.manager$pull(outcome=outcome,
                      keep.dimensions=keep.dimensions,
                      dimensions.values=dimensions.values,
                      target.ontology=target.ontology,
                      debug=debug)
}
}
